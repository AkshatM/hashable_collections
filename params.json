{"name":"Hashable collections","tagline":"Hashable dictionaries and lists in Python, so that you can use them as keys in a dictionary.","body":"# About\r\n\r\nThis library enables dictionaries and lists to be used as keys inside a dictionary. In other words, it makes them hashable. \r\n\r\nWhile mutable objects (lists, dictionaries) should not be made hashable in general, the programmer is trusted not to abuse this power (you *do* test your code before shipping into production, don't you?). An extension option to explicitly make the resulting hashable object immutable is provided below for convenience.\r\n\r\nThere are certain use cases - e.g. when trying to pass seemingly identical keys to [NetworkX](https://networkx.github.io) as different nodes, or when you want to query an object's properties in place while making a mapping instead of calling a complicated identification function - where these may be useful and reduce boilerplate code.  \r\n\r\n# Usage\r\n\r\n```\r\n>>> from hashable_collections import hashable_dict\r\n>>> hashed_dict = hashable_dict({'name':'foo'})\r\n>>> from hashable_collections import hashable_list\r\n>>> hashed_list = hashable_list(['bar',1])\r\n>>> output = {hashed_dict:0,hashed_list:1}\r\n>>> output\r\n{{'name':'foo'}: 0, ['bar', 1]: 1}\r\n\r\n```\r\nThese hashable objects still retain mutability - in other words, it is still possible to assign `hashed_dict['squiggle'] = 'squiggle'` and have it execute without an issue. The hash will change correspondingly, effectively making it a different object from before.\r\n\r\nAlternatively, one can subclass the objects defined here and override the `__setitem__` method to make sure the resulting hashable dictionary/list is immutable:\r\n\r\n```\r\nclass immutable_hashable_dict(hashable_dict):\r\n\r\n    def __setitem__(self,key,value):\r\n        raise ValueError('Immutable hashable dicts do not let you change values inside your dictionary.')\r\n\r\nclass immutable_hashable_list(hashable_list):\r\n\r\n    def __setitem__(self,key,value):\r\n        raise ValueError('Immutable hashable lists do not let you change valus inside your list.')\r\n\r\n```\r\n# Caveats\r\n\r\nThe following is a list of known issues that may crop up with this technology.\r\n\r\n-    Creating a copy: If `s` is a `hashable_dict`, and one does `m = s` and then changes `m[0]`, the corresponding value of `s[0]` is changed as well. **Never** assign an existing hashable_dict or hashable_list to another object unless you are sure the second object is not going to change.\r\n\r\n# Installation\r\n\r\nGit clone and use where needed. In the future, this may be made available via pip.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}